name: Test (callable)

on:
  workflow_call:
    inputs:
      node-version:
        description: Node.js version
        required: false
        default: '["20", "22", "24"]' # https://endoflife.date/nodejs
        type: string
      node-version-file:
        description: Node.js version file
        required: false
        default: ""
        type: string
      os:
        description: OS name
        required: false
        default: '["ubuntu-latest"]'
        type: string
      exclude:
        description: Exclude from matrix
        required: false
        default: "[]"
        type: string
      test-options:
        description: Options to pass the test command
        required: false
        default: ""
        type: string

jobs:
  # NOTE: Prevent an empty matrix if `node-version-file` is specified
  prepare:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.init-node-version.outputs.node-version }}
    permissions: {} # disable all
    defaults:
      run:
        shell: bash
    steps:
      - name: Initialize "node-version" parameter
        id: init-node-version
        run: |
          if [[ -n "${node_version_file}" ]]; then
            node_version='["(skipped)"]'
          fi
          echo "node-version=${node_version}" >> "${GITHUB_OUTPUT}"
        env:
          node_version: ${{ inputs.node-version }}
          node_version_file: ${{ inputs.node-version-file }}

  test:
    needs: prepare

    name: Test on Node.js ${{ inputs.node-version-file || matrix.node-version }} and ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # NOTE: The `strategy` property is not fully supported, so it uses `fromJson()`.
        #       For details, see https://github.community/t/reusable-workflow-with-strategy-matrix/205676/2
        node-version: ${{ fromJson(needs.prepare.outputs.node-version) }}
        os: ${{ fromJson(inputs.os) }}
        exclude: ${{ fromJson(inputs.exclude) }}

    runs-on: ${{ matrix.os }}

    permissions:
      contents: read

    timeout-minutes: 30

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Node.js ${{ matrix.node-version }}
        if: ${{ !inputs.node-version-file }}
        id: setup-node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Set up Node.js from ${{ inputs.node-version-file }} file
        if: ${{ inputs.node-version-file }}
        id: setup-node-file
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: ${{ inputs.node-version-file }}
          cache: npm

      - name: Detect Node.js version
        id: node-version
        run: echo "version=${node_version}" >> "${GITHUB_OUTPUT}"
        env:
          node_version: ${{ steps.setup-node-file.outputs.node-version || steps.setup-node.outputs.node-version }}

      - name: Detect npm version
        id: npm-version
        env:
          node_version: ${{ steps.node-version.outputs.version }}
        run: |
          case "${node_version}" in
            v16*) echo '9' ;;
            v18*) echo '10' ;;
               *) echo 'latest' ;;
          esac | xargs -I {} echo "version={}" >> "${GITHUB_OUTPUT}"

      - name: Install npm ${{ steps.npm-version.outputs.version }}
        env:
          npm_version: ${{ steps.npm-version.outputs.version }}
        run: |
          npm install --global "npm@${npm_version}"
          echo "Successfully installed npm $(npm --version)"

      - name: Install dependencies
        run: npm ci

      - name: Test
        run: npm test --ignore-scripts -- ${{ inputs.test-options }}
