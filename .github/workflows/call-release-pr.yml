name: Release PR (callable)

on:
  workflow_call:
    inputs:
      new-version:
        description: New version to release
        required: true
        type: string

jobs:
  release-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    timeout-minutes: 10

    # Ensure only one release job runs at a time to avoid conflicts.
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Commit history may be required, such as changelog generation etc.

      - name: Set up Node.js LTS
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 'lts/*'

      - name: Install latest npm
        run: npm install --global npm@latest

      - name: Install dependencies
        run: npm ci

      - name: Bump version in package.json
        id: bump-version
        env:
          NEW_VERSION: ${{ github.event.inputs.new-version }}
        run: |
          npm version "${NEW_VERSION}" --no-git-tag-version
          cat <<EOF >> "${GITHUB_OUTPUT}"
          pkg-version=$(jq -r '.version' package.json)
          pkg-name=$(jq -r '.name' package.json)
          pkg-private=$(jq -r 'select(.private == true) | "true"' package.json)
          EOF

      - name: Create pull request
        env:
          GH_TOKEN: ${{ github.token }}
          PKG_VERSION: ${{ steps.bump-version.outputs.pkg-version }}
          PKG_NAME: ${{ steps.bump-version.outputs.pkg-name }}
          PKG_PRIVATE: ${{ steps.bump-version.outputs.pkg-private }}
        run: |
          # Configure git
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"

          # Commit and push changes to a new branch
          BRANCH_NAME="release/${PKG_VERSION}"
          COMMIT_MESSAGE="Release ${PKG_VERSION}"
          git checkout -b "${BRANCH_NAME}"
          git commit --all -am "${COMMIT_MESSAGE}"
          git push origin "${BRANCH_NAME}"

          # Construct a changes URL
          echo -n "Constructing a changes URL... "
          LATEST_TAG=$(gh release list --limit 1 --json 'tagName' --jq '.[0].tagName')
          if [[ -n "${LATEST_TAG}" ]]; then
            CHANGES_FROM="${LATEST_TAG}"
          else
            CHANGES_FROM='@{1year}'
          fi
          CHANGES_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/compare/${CHANGES_FROM}...${BRANCH_NAME}"
          echo "${CHANGES_URL}"

          # Construct a npm package URL if it is not private
          echo -n "Constructing a npm package URL... "
          if [[ "${PKG_PRIVATE}" != "true" ]]; then
            NPM_PACKAGE_URL="<https://www.npmjs.com/package/${PKG_NAME}>"
          else
            NPM_PACKAGE_URL="N/A"
          fi
          echo "${NPM_PACKAGE_URL}"

          # Prepare PR body
          PR_BODY_FILE="${RUNNER_TEMP}/pr_body.txt"
          cat <<EOF > "${PR_BODY_FILE}"
          This PR prepares the release of **${PKG_VERSION}**.

          - Changes: <${CHANGES_URL}>
          - npm package: ${NPM_PACKAGE_URL}

          Checklist:
          - [ ] Quickly review the changes on the URL above.
          - [ ] The new version is expected.
          - [ ] The CHANGELOG.md is expected. If necessary, update it.
          - [ ] Request a review from the owners team.

          If the PR is approved and all checks have passed, you can merge it.
          Then, the release will be automatically started.
          Visit [**Actions**](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions).

          *Generated by the [action run (id=${GITHUB_RUN_ID})](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})*
          EOF

          # Create PR
          echo "Creating a pull request..."
          gh pr create \
            --head "${BRANCH_NAME}" \
            --title "${COMMIT_MESSAGE}" \
            --body-file "${PR_BODY_FILE}" \
            --assignee "${GITHUB_ACTOR}"

          # Show PR URL
          PR_URL=$(gh pr view --json 'url' --jq '.url')
          echo "::notice::Created pull request for releasing ${PKG_VERSION}: ${PR_URL}"
